generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // provider = "postgresql"
  // url      = "postgresql://alexandreac:sieges78@localhost:5432/im-tools"
}

model KoboServer {
  id       String     @id @default(uuid())
  url      String
  token    String
  KoboForm KoboForm[]
}

model KoboForm {
  id          String        @id @default(uuid())
  name        String
  server      KoboServer    @relation(fields: [serverId], references: [id])
  serverId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  uploadedBy  String?
  KoboAnswers KoboAnswers[]
}

model KoboAnswers {
  uuid                   String                   @id
  id                     String
  form                   KoboForm                 @relation(fields: [formId], references: [id])
  formId                 String
  start                  DateTime
  end                    DateTime
  version                String
  submissionTime         DateTime
  validationStatus       String?
  validatedBy            String?
  lastValidatedTimestamp Int?
  geolocation            String?
  answers                Json
  attachments            Json[]
  mpcaPaymentTools       MpcaPaymentToolAnswers[]
  source                 String?
  deletedAt              DateTime?
  deletedBy              String?
  tags                   Json?

  @@unique([id, formId])
}

model MpcaPaymentTool {
  id                                String                   @id @default(uuid())
  name                              String?
  index                             Int                      @unique() @default(autoincrement())
  budgetLineMPCA                    String?
  budgetLineCFR                     String?
  budgetLineStartUp                 String?
  headOfOperation                   String?
  cashAndVoucherAssistanceAssistant String?
  financeAndAdministrationOfficer   String?
  city                              String?
  createdAt                         DateTime                 @default(now())
  updatedAt                         DateTime?
  answers                           MpcaPaymentToolAnswers[]
}

model MpcaPaymentToolAnswers {
  koboAnswers       KoboAnswers     @relation(fields: [koboAnswersUuid], references: [uuid])
  koboAnswersUuid   String
  mpcaPaymentTool   MpcaPaymentTool @relation(fields: [mpcaPaymentToolId], references: [id])
  mpcaPaymentToolId String
  createdAt         DateTime        @default(now())

  @@id([koboAnswersUuid, mpcaPaymentToolId])
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  createdBy       String?
  createdAt       DateTime  @default(now())
  lastConnectedAt DateTime?
  drcJob          String?
  drcOffice       String?
  admin           Boolean   @default(false)
  officer         String?
}

model MpcaWfpDeduplicationIdMapping {
  beneficiaryId String                 @id
  taxId         String?                @unique
  deduplication MpcaWfpDeduplication[]

  @@unique([beneficiaryId, taxId])
}

model MpcaWfpDeduplication {
  id             String                         @id @default(uuid())
  office         String?
  fileName       String?
  fileUpload     DateTime?
  amount         Int
  wfpId          Int
  createdAt      DateTime
  validFrom      DateTime
  expiry         DateTime
  beneficiaryId  String
  beneficiary    MpcaWfpDeduplicationIdMapping? @relation(fields: [beneficiaryId], references: [beneficiaryId])
  message        String?
  status         String
  existingOrga   String?
  existingStart  DateTime?
  existingEnd    DateTime?
  existingAmount Int?
}

enum FeatureAccessLevel {
  Read
  Write
  Admin
}

enum FeatureAccessType {
  KoboForm
}

model FeatureAccess {
  id          String             @id @default(uuid())
  createdBy   String?
  featureType FeatureAccessType?
  featureId   String?
  params      Json?
  level       FeatureAccessLevel
  email       String?
  drcJob      String?
  drcOffice   String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?
}

model AccessToken {
  id        String   @id @default(uuid())
  createdBy DateTime @default(now())
  name      String
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Proxy {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  expireAt  DateTime?
  createdBy String?
  name      String    @unique
  slug      String    @unique
  url       String
  disabled  Boolean?
}
